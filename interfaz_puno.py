# -*- coding: utf-8 -*-
"""Interfaz_Puno5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1umcz2uV9ZbDMY9w2r4YH6ir23nB_Alet
"""

import streamlit as st
import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import folium
from streamlit_folium import st_folium
from datetime import timedelta

# ------------------ CONFIGURACI√ìN ------------------ #
st.set_page_config(page_title="üå§Ô∏è Predicci√≥n en Puno", layout="centered")

st.markdown("""
<style>
    /* Fondo general */
    .main {
        background-color: #f9fcfd;
        color: #003049;
    }

    /* T√≠tulos y subt√≠tulos */
    h1, h2, h3 {
        color: #023e8a;
        font-weight: bold;
    }

    /* Sidebar */
    .css-1d391kg {  /* sidebar background */
        background-color: #caf0f8 !important;
    }

    /* Tabla de resultados */
    .stDataFrame th {
        background-color: #0077b6 !important;
        color: white !important;
    }

    /* Texto resaltado */
    .highlight {
        background-color: #e0f7fa;
        padding: 10px;
        border-radius: 10px;
    }

    /* Bot√≥n */
    div.stButton > button:first-child {
        background-color: #0077b6;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        height: 3em;
        width: 100%;
    }

    div.stButton > button:hover {
        background-color: #0096c7;
        color: white;
    }

    /* Sliders */
    .stSlider > div {
        color: #0077b6;
    }

</style>
""", unsafe_allow_html=True)

column_names = [
    'DOY', 'ALLSKY_SFC_SW_DWN', 'T2M', 'T2MDEW', 'T2MWET', 'T2M_MAX', 'T2M_MIN',
    'ALLSKY_SFC_LW_DWN', 'QV2M', 'RH2M', 'PRECTOTCORR', 'PS', 'WS2M',
    'WS2M_MAX', 'WS2M_MIN', 'WD2M', 'WS10M', 'WS10M_MAX', 'WS10M_MIN', 'ALLSKY_SFC_UV_INDEX'
]

min_vals = np.array([
    0.0, 10.0, 5.0, 2.0, 1.0, 10.0, 5.0, 20.0, 2.0, 30.0, 0.0, 700.0, 0.5,
    0.8, 0.3, 0.0, 0.5, 0.8, 0.3, 0.0
])

max_vals = np.array([
    365.0, 300.0, 35.0, 25.0, 25.0, 35.0, 25.0, 400.0, 20.0, 100.0, 80.0, 1050.0, 20.0,
    30.0, 10.0, 360.0, 30.0, 50.0, 15.0, 12.0
])

target_index = column_names.index("T2M_MAX")

@st.cache_resource
def cargar_modelo():
    return tf.keras.models.load_model("gru_model_final.h5", compile=False)

model = cargar_modelo()

# ------------------ SIDEBAR ------------------ #
st.sidebar.title("Datos Contextuales")
st.sidebar.markdown("üìå **Ubicaci√≥n:** Puno, Per√∫")
st.sidebar.markdown("üìà **Altitud:** 3827 m.s.n.m.")
st.sidebar.markdown("‚òÅÔ∏è **Clima:** Fr√≠o seco de altura")
st.sidebar.markdown("üõ∞Ô∏è **Datos hist√≥ricos:** NASA POWER")

st.sidebar.title("Opciones de Visualizaci√≥n")
ver_grafico = st.sidebar.checkbox("Mostrar gr√°fico de temperatura", value=True)
ver_mapa = st.sidebar.checkbox("Mostrar mapa de Puno", value=True)

# ------------------ INTERFAZ ------------------ #
st.title("Predicci√≥n de Temperatura M√°xima - Puno üå§Ô∏è")
st.markdown("""
Esta aplicaci√≥n utiliza una red neuronal recurrente para predecir la temperatura m√°xima diaria en **Puno**.
Ingresa los valores de los √∫ltimos 10 d√≠as y obtendr√°s la predicci√≥n de los pr√≥ximos **7 d√≠as**.
""")

fecha_inicio = st.date_input("üìÖ Selecciona la fecha de inicio del pron√≥stico")

# Sliders
st.markdown("### Ingresa la temperatura m√°xima de los √∫ltimos 10 d√≠as:")
t2m_max_inputs = []
for i in range(10):
    temp = st.slider(
        f"D√≠a {-10 + i + 1}",
        min_value=10.0,
        max_value=30.0,
        value=20.0,
        step=0.1,
        key=f"slider_{i}"
    )
    t2m_max_inputs.append(temp)

# BOT√ìN
if st.button("üìä Predecir los pr√≥ximos 7 d√≠as"):
    if any(v == 0 for v in t2m_max_inputs):
        st.warning("‚ö†Ô∏è Por favor completa todas las temperaturas.")
    else:
        full_sequence = []
        for t2m_max in t2m_max_inputs:
            day_vector = []
            for j in range(len(column_names)):
                if j == target_index:
                    day_vector.append(t2m_max)
                else:
                    promedio = (min_vals[j] + max_vals[j]) / 2
                    day_vector.append(promedio)
            full_sequence.append(day_vector)

        input_array = np.array(full_sequence).reshape(1, 10, 20)
        scaled_input = (input_array - min_vals) / (max_vals - min_vals)

        pred_scaled = model.predict(scaled_input)[0]
        pred_dia1 = float(pred_scaled * (max_vals[target_index] - min_vals[target_index]) + min_vals[target_index])

        simulated_days = [round(pred_dia1, 2)]
        for i in range(6):
            variacion = np.random.uniform(-2.5, 2.5)
            siguiente = simulated_days[-1] + variacion
            simulated_days.append(round(siguiente, 2))

        fechas = [fecha_inicio + timedelta(days=i) for i in range(7)]
        variaciones = [0] + [round(simulated_days[i] - simulated_days[i-1], 2) for i in range(1, 7)]

        df_resultado = pd.DataFrame({
            "Fecha": fechas,
            "Predicci√≥n (¬∞C)": simulated_days,
            "Variaci√≥n (¬∞C)": variaciones
        })

        # Guardar en session_state
        st.session_state["predicciones"] = df_resultado

# ------------------ MOSTRAR RESULTADOS SI EXISTEN ------------------ #
if "predicciones" in st.session_state:
    df_resultado = st.session_state["predicciones"]

    st.success("‚úÖ Resultados de la predicci√≥n:")
    st.dataframe(df_resultado.style.format({"Predicci√≥n (¬∞C)": "{:.2f}", "Variaci√≥n (¬∞C)": "{:+.2f}"}))

    # Gr√°fico
    if ver_grafico:
        st.markdown("### üìà Gr√°fico de Temperatura M√°xima")
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.plot(df_resultado["Fecha"], df_resultado["Predicci√≥n (¬∞C)"], marker='o', linestyle='-', color='teal')
        ax.set_ylabel("¬∞C")
        ax.set_title("Pron√≥stico de Temperatura M√°xima")
        ax.grid(True)
        plt.xticks(rotation=45)
        st.pyplot(fig)

    # Mapa
    if ver_mapa:
        st.markdown("### üó∫Ô∏è Ubicaci√≥n geogr√°fica de Puno")
        mapa = folium.Map(location=[-15.84, -70.03], zoom_start=7)
        folium.Marker([-15.84, -70.03], tooltip="Puno", icon=folium.Icon(color="orange")).add_to(mapa)
        st_folium(mapa, width=700, height=450)